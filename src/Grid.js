import React, { useState, useEffect } from 'react';
import anime from 'animejs/lib/anime.es.js';
import './Grid.css';

const Grid = () => {
  const gridSize = 50; 
  const [grid, setGrid] = useState(Array.from({ length: gridSize * gridSize }, (_, index) => ({
    char: ' ',
    visible: false,
    id: index,
  })));

  useEffect(() => {
    const asciiArt = [
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
        "^++~#%^^~-|~+-+-/=*@?#+-^|#?**~&|/+*+&++@#^##@^**%",
        "*+=$%=*+/^$|@%*=|~%&$|&^=^-/|$=~$/-%/~~~+~$&~^^/#%",
        "=~/@^=#|/-?^+*--&%*%+||%%?|&#-&@@-###@&%#%%#-?+%?*",
        "=$@*|%?/|=|@@^@&?^/|^-%$=$-?/=&$$%%=$~^|?$^+-=#/%%",
        "^?@*?$-&~?^*&&-^##%/?/+$^%/++*$//-^?-^~#^?^+^+~&$=",
      ];
    let artIndex = 0;
    setGrid(grid.map(cell => {
      const row = Math.floor(artIndex / gridSize);
      const col = artIndex % gridSize;
      let char = ' ';
      if (row < asciiArt.length && col < asciiArt[row].length) {
        char = asciiArt[row][col];
      }
      artIndex++;
      return { ...cell, char: char };
    }));
  }, []);

  const revealArea = (index) => {
    const revealRadius = 3; // Defines the size of the area to reveal
    const updatedGrid = grid.map(cell => {
      const distance = Math.max(Math.abs(Math.floor(index / gridSize) - Math.floor(cell.id / gridSize)), Math.abs(index % gridSize - cell.id % gridSize));
      if (distance <= revealRadius) {
        return { ...cell, visible: true };
      }
      return cell;
    });
    setGrid(updatedGrid);
  };

  const handleCellClick = (index) => {
    revealArea(index);
    anime({
      targets: `#cell-${index}`,
      scale: [
        {value: 0.9, easing: 'easeOutSine', duration: 200},
        {value: 1, easing: 'easeInOutQuad', duration: 300}
      ],
      backgroundColor: '#F0F0F0',
    });
  };

  return (
    <div className="grid">
      {grid.map(cell => (
        <div key={cell.id} id={`cell-${cell.id}`} className="grid-cell" onClick={() => handleCellClick(cell.id)}>
          {cell.visible ? cell.char : ''}
        </div>
      ))}
    </div>
  );
};

export default Grid;
